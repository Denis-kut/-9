settings.py

valid_email = "denpad2018@gmail.ru"
valid_password = "12345678"

api.py

class PetFriends:
"""апи библиотека к веб приложению Pet Friends"""

def __init__(self):
    self.base_url = "https://petfriends1.herokuapp.com/"
    self.api_key = 0

def get_api_key(self, email: str, passwd: str) -> json:
    """Метод делает запрос к API сервера и возвращает статус запроса и результат в формате
    JSON с уникальным ключем пользователя, найденного по указанным email и паролем"""

    headers = {
        'email': email,
        'password': passwd,
    }
    res = requests.get(self.base_url+'api/key', headers=headers)
    status = res.status_code
    result = ""
    try:
        result = res.json()
        self.api_key = result.get('key')
        print(self.api_key)
    except json.decoder.JSONDecodeError:
        result = res.text
    return status, result

def get_list_of_pets(self, auth_key: json, filter: str = "") -> json:
    """Метод делает запрос к API сервера и возвращает статус запроса и результат в формате JSON
    со списком наденных питомцев, совпадающих с фильтром. На данный момент фильтр может иметь
    либо пустое значение - получить список всех питомцев, либо 'my_pets' - получить список
    собственных питомцев"""

    headers = {'auth_key': auth_key['key']}
    filter = {'filter': filter}

    res = requests.get(self.base_url + 'api/pets', headers=headers, params=filter)
    status = res.status_code
    result = ""
    try:
        result = res.json()
    except json.decoder.JSONDecodeError:
        result = res.text
    return status, result

def add_new_pet(self, auth_key: json, name: str, animal_type: str,
                age: str, pet_photo: str) -> json:
    """Метод отправляет (постит) на сервер данные о добавляемом питомце и возвращает статус
    запроса на сервер и результат в формате JSON с данными добавленного питомца"""

    data = MultipartEncoder(
        fields={
            'name': name,
            'animal_type': animal_type,
            'age': age,
            'pet_photo': (pet_photo, open(pet_photo, 'rb'), 'image/jpeg')
        })
    headers = {'auth_key': auth_key['key'], 'Content-Type': data.content_type}

    res = requests.post(self.base_url + 'api/pets', headers=headers, data=data)
    status = res.status_code
    result = ""
    try:
        result = res.json()
    except json.decoder.JSONDecodeError:
        result = res.text
    print(result)
    return status, result

def delete_pet(self, auth_key: json, pet_id: str) -> json:
    """Метод отправляет на сервер запрос на удаление питомца по указанному ID и возвращает
    статус запроса и результат в формате JSON с текстом уведомления о успешном удалении.
    На сегодняшний день тут есть баг - в result приходит пустая строка, но status при этом = 200"""

    headers = {'auth_key': auth_key['key']}

    res = requests.delete(self.base_url + 'api/pets/' + pet_id, headers=headers)
    status = res.status_code
    result = ""
    try:
        result = res.json()
    except json.decoder.JSONDecodeError:
        result = res.text
    return status, result

def update_pet_info(self, auth_key: json, pet_id: str, name: str,
                    animal_type: str, age: int) -> json:
    """Метод отправляет запрос на сервер о обновлении данных питомуа по указанному ID и
    возвращает статус запроса и result в формате JSON с обновлённыи данными питомца"""

    headers = {'auth_key': auth_key['key']}
    data = {
        'name': name,
        'age': age,
        'animal_type': animal_type
    }

    res = requests.put(self.base_url + 'api/pets/' + pet_id, headers=headers, data=data)
    status = res.status_code
    result = ""
    try:
        result = res.json()
    except json.decoder.JSONDecodeError:
        result = res.text
    return status, result

def add_photo(self):

    headers = {'auth_key': self.api_key}
    data = MultipartEncoder(
        fields={
            'pet_photo': ('baba.jpg', open('baba.jpg', 'rb'), 'image/jpeg')
        })
    pet_id = requests.get(self.base_url+'api/pets', headers=headers).json().get('pets')[0].get('id')
    print(pet_id)
    try:
        res = requests.post(self.base_url + 'api/pets/set_photo/' + pet_id, headers=headers, data=data).json()
    except:
        print("Сорян, у сервера 500ка и ничего ты с этим не сделаешь. возращает HTML, а не JSON")
    return res
test_pet_friends.py

from api import PetFriends
from settings import valid_email, valid_password

pf = PetFriends()

def test_get_api_key_for_valid_user(email=valid_email, password=valid_password):
status, result = pf.get_api_key(email, password)
assert status == 200
assert 'key' in result

def test_get_all_pets_with_valid_key(filter=''):
_, auth_key = pf.get_api_key(valid_email, valid_password)
status, result = pf.get_list_of_pets(auth_key, filter)
assert status == 200
assert len(result['pets']) > 0

def test_add_new_pet_with_valid_data(name='Барбоскин', animal_type='двортерьер',
age='4', pet_photo='images/cat1.jpg'):
"""Проверяем что можно добавить питомца с корректными данными"""

# Получаем полный путь изображения питомца и сохраняем в переменную pet_photo
pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)

# Запрашиваем ключ api и сохраняем в переменую auth_key
_, auth_key = pf.get_api_key(valid_email, valid_password)

# Добавляем питомца
status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)

# Сверяем полученный ответ с ожидаемым результатом
assert status == 200
assert result['name'] == name
def test_successful_delete_self_pet():
"""Проверяем возможность удаления питомца"""

# Получаем ключ auth_key и запрашиваем список своих питомцев
_, auth_key = pf.get_api_key(valid_email, valid_password)
_, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

# Проверяем - если список своих питомцев пустой, то добавляем нового и опять запрашиваем список своих питомцев
if len(my_pets['pets']) == 0:
    pf.add_new_pet(auth_key, "Суперкот", "кот", "3", "images/cat1.jpg")
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

# Берём id первого питомца из списка и отправляем запрос на удаление
pet_id = my_pets['pets'][0]['id']
status, _ = pf.delete_pet(auth_key, pet_id)

# Ещё раз запрашиваем список своих питомцев
_, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

# Проверяем что статус ответа равен 200 и в списке питомцев нет id удалённого питомца
assert status == 200
assert pet_id not in my_pets.values()
def test_successful_update_self_pet_info(name='Мурзик', animal_type='Котэ', age=5):
"""Проверяем возможность обновления информации о питомце"""

# Получаем ключ auth_key и список своих питомцев
_, auth_key = pf.get_api_key(valid_email, valid_password)
_, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

# Еслди список не пустой, то пробуем обновить его имя, тип и возраст
if len(my_pets['pets']) > 0:
    status, result = pf.update_pet_info(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)

    # Проверяем что статус ответа = 200 и имя питомца соответствует заданному
    assert status == 200
    assert result['name'] == name
else:
    # если спиок питомцев пустой, то выкидываем исключение с текстом об отсутствии своих питомцев
    raise Exception("There is no my pets")
def test_successful_adding_photo():

response = pf.add_photo()
print(response.text)

assert response.status_code == 200
assert response.get('pet_photo') != null
pf.get_api_key(valid_email, valid_password)
test_successful_adding_photo()
